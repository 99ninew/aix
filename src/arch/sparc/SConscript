# -*- mode:python -*-

# Copyright (c) 2004-2005 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('*')

if not env['CONF']['USE_SPARC_ISA']:
    Return()

env.TagImplies('sparc isa', 'gem5 lib')

env.TagImplies('isa', 'sparc isa')

Source('asi.cc', tags=['gem5 lib', 'sparc isa'])
Source('decoder.cc', tags=['gem5 lib', 'sparc isa'])
Source('faults.cc', tags=['gem5 lib', 'sparc isa'])
Source('fs_workload.cc', tags=['gem5 lib', 'sparc isa'])
Source('isa.cc', tags=['gem5 lib', 'sparc isa'])
Source('linux/se_workload.cc', tags=['gem5 lib', 'sparc isa'])
Source('linux/syscalls.cc', tags=['gem5 lib', 'sparc isa'])
Source('nativetrace.cc', tags=['gem5 lib', 'sparc isa'])
Source('pagetable.cc', tags=['gem5 lib', 'sparc isa'])
Source('process.cc', tags=['gem5 lib', 'sparc isa'])
Source('regs/int.cc', tags=['gem5 lib', 'sparc isa'])
Source('remote_gdb.cc', tags=['gem5 lib', 'sparc isa'])
Source('se_workload.cc', tags=['gem5 lib', 'sparc isa'])
Source('tlb.cc', tags=['gem5 lib', 'sparc isa'])
Source('ua2005.cc', tags=['gem5 lib', 'sparc isa'])

SimObject(
    'SparcDecoder.py',
    sim_objects=['SparcDecoder'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcFsWorkload.py',
    sim_objects=['SparcFsWorkload'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcInterrupts.py',
    sim_objects=['SparcInterrupts'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcISA.py',
    sim_objects=['SparcISA'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcMMU.py',
    sim_objects=['SparcMMU'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcNativeTrace.py',
    sim_objects=['SparcNativeTrace'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcSeWorkload.py',
    sim_objects=['SparcSEWorkload', 'SparcEmuLinux'],
    tags=['gem5 lib', 'sparc isa']
)
SimObject(
    'SparcTLB.py',
    sim_objects=['SparcTLB'],
    tags=['gem5 lib', 'sparc isa']
)

SimObject('SparcCPU.py', sim_objects=[], tags=['gem5 lib', 'sparc isa'])

DebugFlag('Sparc', "Generic SPARC ISA stuff", tags=['gem5 lib', 'sparc isa'])
DebugFlag(
    'RegisterWindows',
    "Register window manipulation",
    tags=['gem5 lib', 'sparc isa']
)

ISADesc('isa/main.isa', tags=['gem5 lib', 'sparc isa'])
